{
	"info": {
		"_postman_id": "a6312fa2-5ec5-4fc6-ac08-1f01e51c1a5f",
		"name": "1_Controller3.x_demo_cleanup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8593ce1-c802-4ed2-b8af-e4cd057d8c54",
						"exec": [
							"pm.test(\"Login status\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 204){",
							"        console.log(\"Login was successful. Moving on to deletion steps.\");",
							"        pm.environment.set(\"TEMP_ITR\",0);",
							"        postman.setNextRequest(\"Get_Env_List\");",
							"        return true;",
							"    }",
							"    else {",
							"        console.error(\"Login was not successful. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Login was not successful. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credentials\": {\n        \"type\": \"BASIC\",\n        \"username\": \"{{USERNAME}}\",\n        \"password\": \"{{PASSWORD}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/platform/login",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"platform",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Env_List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "517d538d-850c-49b3-9def-e867fef933ee",
						"exec": [
							"pm.test(\"Check if any environments are present\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var envs = new Array();",
							"        //Get all the environments and store in a variable",
							"        if(responseJson.items.length > 0){",
							"",
							"            for(i=0; i< responseJson.items.length; i++){",
							"                envs.push(responseJson.items[i].metadata.name);",
							"            }",
							"",
							"            //Store all environments in a list and perform cleanup in sequence",
							"            pm.environment.set(\"ENV_ITR\", Number(0));",
							"            pm.environment.set(\"ENV_CURRENT\", envs[0]);",
							"            pm.environment.set(\"ENV_LIST\", envs.toString());",
							"",
							"            console.log(\"Environments present in controller: [\" + envs + \"]\");",
							"            //Move to Delete_Envs call",
							"            postman.setNextRequest(\"Get_Apps_List\");",
							"        } ",
							"        else{",
							"            //Skip deletion if there are no Environments to be deleted.",
							"            console.log(\"No Environment present to delete.\");",
							"            postman.setNextRequest(null);",
							"        } ",
							"        return true; ",
							"    }",
							"    else{",
							"        console.error(\"Get Environment List call failed. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get Environment List call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Apps_List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eae813c3-8d37-4596-9486-586b8eafc3a5",
						"exec": [
							"pm.test(\"Check if any applications are present\", function(){",
							"    var status = pm.response.code;",
							"    var current_env = pm.environment.get(\"ENV_CURRENT\");",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var apps = new Array();",
							"        //Get all the Apps and store in a variable",
							"        if(responseJson.items.length > 0){",
							"",
							"            for(i=0; i< responseJson.items.length; i++){",
							"                apps.push(responseJson.items[i].metadata.name);",
							"            }",
							"",
							"            //Store all Apps for the current environment in a list and perform cleanup in sequence",
							"            pm.environment.set(\"APP_ITR\", Number(0));",
							"            pm.environment.set(\"APP_CURRENT\", apps[0]);",
							"            pm.environment.set(\"APP_LIST\", apps.toString());",
							"",
							"            console.log(\"Apps present in (\"+ current_env +\") environment: [\" + apps + \"]\");",
							"            //Move to next call",
							"            postman.setNextRequest(\"Get_PublishedAPI_List\");",
							"        } ",
							"        else{",
							"            //Skip deletion if there are no Applications to be deleted.",
							"            console.log(\"No Application present to delete.\");",
							"            postman.setNextRequest(\"Get_Devportal_List\");",
							"        }",
							"        return true;  ",
							"    }",
							"    else{",
							"        console.error(\"Get Application List call failed. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get Application List call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3e2875cb-b20a-401f-b118-9d9b5bbb8294",
						"exec": [
							"var current_env = pm.environment.get(\"ENV_CURRENT\");",
							"console.log(\"NOTICE: Getting list of Apps in [\"+ current_env +\"] environment\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/apps",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"apps"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_PublishedAPI_List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9c051da-47dd-422b-9cc2-949c1152fd36",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5edbeca4-ea24-42fd-850e-1b978123ed5b",
						"exec": [
							"pm.test(\"Check if any Published APIs are present within current Application\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var publishedAPIs = new Array();",
							"        //Get all the publishedAPIs and store in a variable",
							"        if(responseJson.length > 0){",
							"",
							"            for(i=0; i< responseJson.length; i++){",
							"                publishedAPIs.push(responseJson[i].metadata.name);",
							"            }",
							"",
							"            console.log(\"publishedAPIs within current application marked for deletion: [\" + publishedAPIs + \"]\");",
							"            pm.environment.set(\"TEMP_LIST\", publishedAPIs.toString());",
							"",
							"            //Move to Delete_PlublishedAPI call",
							"            postman.setNextRequest(\"Delete_PublishedAPI\");",
							"        } ",
							"        else{",
							"            //Skip deletion as no Published API present to be deleted within current application.",
							"            pm.environment.set(\"TEMP_ITR\", 0);",
							"            pm.environment.unset(\"TEMP_VARIABLE\");",
							"            pm.environment.unset(\"TEMP_LIST\");",
							"            console.log(\"No Published API present within current application to delete.\");",
							"            postman.setNextRequest(\"Delete_App\");",
							"        }  ",
							"        return true;",
							"    }",
							"    else{",
							"        console.error(\"Get Published API call failed for current application. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get Published API call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/apps/{{APP_CURRENT}}/published-apis",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"apps",
						"{{APP_CURRENT}}",
						"published-apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_PublishedAPI",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a1d98a2-2097-47a6-a8fa-3d9c9ae2e6eb",
						"exec": [
							"const publishedAPIs = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"let itr = pm.environment.get(\"TEMP_ITR\");",
							"pm.environment.set(\"TEMP_VARIABLE\", publishedAPIs[itr]);",
							"console.log(\"NOTICE: Deleting Published API: \"+publishedAPIs[itr]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7c3919a-d903-4b52-bd26-d1c48e03b607",
						"exec": [
							"const sleep = (seconds) => {",
							"    console.log(\"sleeping for \"+ seconds +\" seconds...\");",
							"    return new Promise(resolve => setTimeout(resolve, Number(seconds)*1000));",
							"}",
							"",
							"pm.test(\"Check if Publish API deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    const sleep_time = pm.environment.get(\"SLEEP_TIME\");",
							"    if(status == 202 || status == 204){",
							"        let itr = pm.environment.get(\"TEMP_ITR\");",
							"        ",
							"        const publishedAPIs = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"        if(Number(itr) < publishedAPIs.length - 1){",
							"            pm.environment.set(\"TEMP_ITR\", Number(itr) + 1);",
							"            postman.setNextRequest(\"Delete_PublishedAPI\");  ",
							"        }",
							"        else{",
							"            pm.environment.set(\"TEMP_ITR\", 0);",
							"            pm.environment.unset(\"TEMP_VARIABLE\");",
							"            pm.environment.unset(\"TEMP_LIST\");",
							"            sleep(sleep_time);",
							"            postman.setNextRequest(\"Get_PublishedAPI_List\");",
							"        }  ",
							"        return true;",
							"    }",
							"    else{",
							"        pm.environment.set(\"TEMP_ITR\", 0);",
							"        pm.environment.unset(\"TEMP_VARIABLE\");",
							"        pm.environment.unset(\"TEMP_LIST\");",
							"        sleep(sleep_time);",
							"        postman.setNextRequest(\"Get_PublishedAPI_List_For_Sports\");",
							"        return false;",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/apps/{{APP_CURRENT}}/published-apis/{{TEMP_VARIABLE}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"apps",
						"{{APP_CURRENT}}",
						"published-apis",
						"{{TEMP_VARIABLE}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_App",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8f582f9c-2e5b-4127-b0ec-8ed5b735bb14",
						"exec": [
							"var app = pm.environment.get(\"APP_CURRENT\");",
							"console.log(\"NOTICE: Deleting Application: \"+app);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6f8343bf-ea0c-4934-9841-0d3a36d555d8",
						"exec": [
							"pm.test(\"Check if Application deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 202 || status == 204){",
							"        let itr = pm.environment.get(\"APP_ITR\");",
							"        const apps = pm.environment.get(\"APP_LIST\").split(\",\");",
							"        if(Number(itr) < apps.length - 1){",
							"            var nextAppIndex = Number(itr) + 1;",
							"            pm.environment.set(\"APP_ITR\", nextAppIndex);",
							"            pm.environment.set(\"APP_CURRENT\", apps[nextAppIndex])",
							"",
							"            postman.setNextRequest(\"Get_PublishedAPI_List\");   ",
							"        }",
							"        else{",
							"            pm.environment.unset(\"APP_CURRENT\");",
							"            pm.environment.unset(\"APP_LIST\");",
							"            pm.environment.unset(\"APP_ITR\");",
							"            postman.setNextRequest(\"Get_Devportal_List\");",
							"        }",
							"        return true;",
							"    }",
							"    else{",
							"        postman.setNextRequest(\"Get_Devportal_List\");",
							"        return false;",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/apps/{{APP_CURRENT}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"apps",
						"{{APP_CURRENT}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Devportal_List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9aef6e70-5a53-4284-bd6b-945f95c9de86",
						"exec": [
							"pm.test(\"Check if any DevPortals are present for current environment\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var devportals = new Array();",
							"        //Get all the Devportals and store in a variable",
							"        if(responseJson.items.length > 0){",
							"",
							"            for(i=0; i< responseJson.items.length; i++){",
							"                devportals.push(responseJson.items[i].metadata.name);",
							"            }",
							"",
							"            console.log(\"Devportals marked for deletion: [\" + devportals + \"]\");",
							"            pm.environment.set(\"TEMP_LIST\", devportals.toString());",
							"",
							"            //Move to Delete_Devportals call",
							"            postman.setNextRequest(\"Delete_Devportals\");",
							"        } ",
							"        else{",
							"            //Skip deletion if there are no Devportals to be deleted.",
							"            console.log(\"No Devportal present to delete.\");",
							"            postman.setNextRequest(\"Get_Gateway_List\");",
							"        } ",
							"        return true; ",
							"    }",
							"    else{",
							"        console.error(\"Get DevPortal List call failed. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get DevPortal List call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3fddfd39-c0a4-47de-a455-dd2a60b26315",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/devportals",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"devportals"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Devportals",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d32f8b76-f0db-4e5a-aa74-b8fed6641314",
						"exec": [
							"const sleep = (seconds) => {",
							"    console.log(\"sleeping for \"+ seconds +\" seconds...\");",
							"    return new Promise(resolve => setTimeout(resolve, Number(seconds)*1000));",
							"}",
							"pm.test(\"Check if DevPortal deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 202 || status == 204){",
							"        let itr = pm.environment.get(\"TEMP_ITR\");",
							"        const sleep_time = pm.environment.get(\"SLEEP_TIME\");",
							"        const devportals = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"        if(Number(itr) < devportals.length - 1){",
							"            pm.environment.set(\"TEMP_ITR\", Number(itr) + 1);",
							"            sleep(sleep_time);",
							"            postman.setNextRequest(\"Delete_Devportals\");   ",
							"        }",
							"        else{",
							"            pm.environment.set(\"TEMP_ITR\", 0);",
							"            pm.environment.unset(\"TEMP_VARIABLE\");",
							"            pm.environment.unset(\"TEMP_LIST\");",
							"            sleep(sleep_time);",
							"            postman.setNextRequest(\"Get_Gateway_List\");",
							"        }",
							"        return true;",
							"    }",
							"    else{",
							"        postman.setNextRequest(\"Get_Gateway_List\");",
							"        return false;",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2fcbf0bc-c663-4655-b134-9e5c2b39050f",
						"exec": [
							"const devportals = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"let itr = pm.environment.get(\"TEMP_ITR\");",
							"pm.environment.set(\"TEMP_VARIABLE\", devportals[itr]);",
							"console.log(\"NOTICE: Deleting DevPortal: \" + devportals[itr]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/devportals/{{TEMP_VARIABLE}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"devportals",
						"{{TEMP_VARIABLE}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Gateway_List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4138b075-7518-48f9-be01-92d431180ac9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4e2400ec-d131-496e-8446-51ffd783c8c7",
						"exec": [
							"pm.test(\"Check if any Gateways are present\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var gateways = new Array();",
							"        //Get all the Gateways and store in a variable",
							"        if(responseJson.items.length > 0){",
							"",
							"            for(i=0; i< responseJson.items.length; i++){",
							"                gateways.push(responseJson.items[i].metadata.name);",
							"            }",
							"",
							"            console.log(\"Gateways marked for deletion: [\" + gateways + \"]\");",
							"            pm.environment.set(\"TEMP_LIST\", gateways.toString());",
							"",
							"            //Move to Delete_Gateways call",
							"            postman.setNextRequest(\"Delete_Gateways\");",
							"        } ",
							"        else{",
							"            //Skip deletion if there are no Gateways to be deleted.",
							"            console.log(\"No Gateway present to delete.\");",
							"            postman.setNextRequest(\"Get_Certificate_List\");",
							"        } ",
							"        return true; ",
							"    }",
							"    else{",
							"        console.error(\"Get Gateway List call failed. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get Gateway List call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/gateways",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"gateways"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Gateways",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bfa193bd-3956-4bec-87aa-cb920d1f01ed",
						"exec": [
							"const gateways = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"let itr = pm.environment.get(\"TEMP_ITR\");",
							"pm.environment.set(\"TEMP_VARIABLE\", gateways[itr]);",
							"console.log(\"NOTICE: Deleting gateway: \"+gateways[itr]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "00d272ee-f96f-4b03-b995-e7931c3b8d38",
						"exec": [
							"const sleep = (seconds) => {",
							"    console.log(\"sleeping for \"+ seconds +\" seconds...\");",
							"    return new Promise(resolve => setTimeout(resolve, Number(seconds)*1000));",
							"}",
							"pm.test(\"Check if Gateway deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 202 || status == 204){",
							"        let itr = pm.environment.get(\"TEMP_ITR\");",
							"        const sleep_time = pm.environment.get(\"SLEEP_TIME\");",
							"        const gateways = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"        if(Number(itr) < gateways.length - 1){",
							"            pm.environment.set(\"TEMP_ITR\", Number(itr) + 1);",
							"            sleep(sleep_time);",
							"            postman.setNextRequest(\"Delete_Gateways\");    ",
							"        }",
							"        else{",
							"            pm.environment.set(\"TEMP_ITR\", 0);",
							"            pm.environment.unset(\"TEMP_VARIABLE\");",
							"            pm.environment.unset(\"TEMP_LIST\");",
							"            sleep(sleep_time);",
							"            postman.setNextRequest(\"Get_Gateway_List\");",
							"        }",
							"        return true;",
							"    }",
							"    else{",
							"        postman.setNextRequest(\"Get_Certificate_List\");",
							"        return false;",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/gateways/{{TEMP_VARIABLE}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"gateways",
						"{{TEMP_VARIABLE}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_Certificate_List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "32956bc9-2551-4433-ab8d-766bc836b850",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "47370d83-97d3-48ec-b0b1-a2b6af8830b7",
						"exec": [
							"pm.test(\"Check if any Certificates are present\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var certificates = new Array();",
							"        //Get all the certificates and store in a variable",
							"        if(responseJson.items.length > 0){",
							"",
							"            for(i=0; i< responseJson.items.length; i++){",
							"                certificates.push(responseJson.items[i].metadata.name);",
							"            }",
							"",
							"            console.log(\"certificates marked for deletion: [\" + certificates +\"]\");",
							"            pm.environment.set(\"TEMP_LIST\", certificates.toString());",
							"",
							"            //Move to Delete_Certificates call",
							"            postman.setNextRequest(\"Delete_Certificates\");",
							"        } ",
							"        else{",
							"            //Skip deletion if there are no certificates to be deleted.",
							"            console.log(\"No certificate present to delete.\");",
							"            postman.setNextRequest(\"Delete_Env\");",
							"        } ",
							"        return true; ",
							"    }",
							"    else{",
							"        console.error(\"Get Certificates call failed. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get Certificates call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/certs",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"certs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Certificates",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65b8d1ea-71f2-461e-b4a4-a2e3fd030814",
						"exec": [
							"const certificates = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"let itr = pm.environment.get(\"TEMP_ITR\");",
							"pm.environment.set(\"TEMP_VARIABLE\", certificates[itr]);",
							"console.log(\"NOTICE: Deleting certificate: \"+certificates[itr]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1b9e9c69-288d-40d6-bebe-00fb6a13609d",
						"exec": [
							"pm.test(\"Check if Certificates deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 204){",
							"        let itr = pm.environment.get(\"TEMP_ITR\");",
							"        const certificates = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"        if(Number(itr) < certificates.length - 1){",
							"            pm.environment.set(\"TEMP_ITR\", Number(itr) + 1);",
							"            postman.setNextRequest(\"Delete_Certificates\");   ",
							"        }",
							"        else{",
							"            pm.environment.set(\"TEMP_ITR\", 0);",
							"            pm.environment.unset(\"TEMP_VARIABLE\");",
							"            pm.environment.unset(\"TEMP_LIST\");",
							"            postman.setNextRequest(\"Delete_Env\");",
							"        }",
							"        return true;",
							"    }",
							"    else{",
							"        postman.setNextRequest(\"Delete_Env\");",
							"        return false;",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}/certs/{{TEMP_VARIABLE}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}",
						"certs",
						"{{TEMP_VARIABLE}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Env",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d37beec-76a9-471f-9b1c-a49240ce7bde",
						"exec": [
							"var env = pm.environment.get(\"ENV_CURRENT\");",
							"console.log(\"NOTICE: Deleting Environment: \"+env);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5c2f7713-3cf7-4224-8fb7-93bb54e7a0f5",
						"exec": [
							"pm.test(\"Check if environment deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 202 || status == 204){",
							"        let itr = pm.environment.get(\"ENV_ITR\");",
							"        const envs = pm.environment.get(\"ENV_LIST\").split(\",\");",
							"        if(Number(itr) < envs.length - 1){",
							"            var nextEnvIndex = Number(itr) + 1;",
							"",
							"            pm.environment.set(\"ENV_ITR\", Number(itr) + 1);",
							"            pm.environment.set(\"ENV_CURRENT\", envs[nextEnvIndex])",
							"            postman.setNextRequest(\"Get_Apps_List\");   ",
							"        }",
							"        else{",
							"            pm.environment.unset(\"ENV_CURRENT\");",
							"            pm.environment.unset(\"ENV_LIST\");",
							"            pm.environment.unset(\"ENV_ITR\");",
							"            postman.setNextRequest(\"Get_API_Definition_List\");",
							"        }",
							"        return true;",
							"    }",
							"    else {",
							"        postman.setNextRequest(\"Get_API_Definition_List\");",
							"        return false;",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/environments/{{ENV_CURRENT}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"environments",
						"{{ENV_CURRENT}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_API_Definition_List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2f104380-1f40-4f54-898e-16b092e5dd86",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b5a7462b-5eee-4acb-aec7-143b907ced54",
						"exec": [
							"pm.test(\"Check if any API Definitions are present\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 200){",
							"        const responseJson = pm.response.json();",
							"        var apiDefinitions = new Array();",
							"        //Get all the API Definitions and store in a variable",
							"        if(responseJson.items.length > 0){",
							"",
							"            for(i=0; i< responseJson.items.length; i++){",
							"                apiDefinitions.push(responseJson.items[i].metadata.name);",
							"            }",
							"",
							"            console.log(\"API Definitions marked for deletion: [\" + apiDefinitions +\"]\");",
							"            pm.environment.set(\"TEMP_LIST\", apiDefinitions.toString());",
							"",
							"            //Move to Delete_API_Definition call",
							"            postman.setNextRequest(\"Delete_API_Definition\");",
							"        } ",
							"        else{",
							"            //Skip deletion if there are no API Definitions present.",
							"            console.log(\"No API Definitions present to delete.\");",
							"            postman.setNextRequest(null);",
							"        }  ",
							"        return true;",
							"    }",
							"    else{",
							"        console.error(\"Get API Definitions call failed. Exiting!!!\");",
							"        postman.setNextRequest(null);",
							"        pm.expect.fail(\"Get API Definitions call failed. Exiting!!!\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/api-definitions",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"api-definitions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_API_Definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa1f8cf1-c3f7-4cd0-9c0e-1e531fb013ac",
						"exec": [
							"pm.test(\"Check if API definition deletion was successful\", function(){",
							"    var status = pm.response.code;",
							"    if(status == 204){",
							"        let itr = pm.environment.get(\"TEMP_ITR\");",
							"        const apiDefinitions = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"        if(Number(itr) < apiDefinitions.length - 1){",
							"            pm.environment.set(\"TEMP_ITR\", Number(itr) + 1);",
							"            postman.setNextRequest(\"Delete_API_Definition\");    ",
							"        }",
							"        else{",
							"            pm.environment.set(\"TEMP_ITR\", 0);",
							"            pm.environment.unset(\"TEMP_VARIABLE\");",
							"            pm.environment.unset(\"TEMP_LIST\");",
							"            postman.setNextRequest(null);",
							"        }",
							"        return true;",
							"    }",
							"    else{",
							"        postman.setNextRequest(null);",
							"        return false;",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "00e6a69b-2297-4f6d-8212-e155bf03a8c4",
						"exec": [
							"const apiDefinitions = pm.environment.get(\"TEMP_LIST\").split(\",\");",
							"let itr = pm.environment.get(\"TEMP_ITR\");",
							"pm.environment.set(\"TEMP_VARIABLE\", apiDefinitions[itr]);",
							"console.log(\"NOTICE: Deleting API Definition: \" + apiDefinitions[itr]);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{CTRL_HOST}}/api/v1/services/api-definitions/{{TEMP_VARIABLE}}",
					"protocol": "https",
					"host": [
						"{{CTRL_HOST}}"
					],
					"path": [
						"api",
						"v1",
						"services",
						"api-definitions",
						"{{TEMP_VARIABLE}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "791f865e-c951-4b6c-91ba-f17bfd48bfcc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "56230d23-2fb5-4ed5-9245-adddbbff399b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}